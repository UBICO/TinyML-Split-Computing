######################################################################################
# DEVELOPMENT                                                                        #
# Dockerfile used to build a Python environment for a Django project                 #
######################################################################################

# Use the official Python 3.9 image (Debian-based)
FROM python:3.9

ARG WORK_DIR=$WORK_DIR
# Set the work directory name
ENV WORK_DIR=$WORK_DIR
ENV WORK_DIR=/home/$WORK_DIR/web

# Set environment variables to configure Python behavior
# PYTHONDONTWRITEBYTECODE: Prevents Python from writing compiled bytecode to disk
# PYTHONUNBUFFERED: Prevents Python from buffering output streams, such as stdout and stderr
ENV PYTHONDONTWRITEBYTECODE 1 
ENV PYTHONUNBUFFERED 1 

# Install system dependencies
RUN apt-get update && apt-get clean

# Set the working directory for the project
RUN mkdir -p $WORK_DIR
WORKDIR $WORK_DIR

# Install dependencies defined in requirements.txt
COPY ./requirements.txt .
RUN pip install --upgrade pip
RUN pip install -r requirements.txt

# Copy the entire project into the working directory
COPY . $WORK_DIR

# Create the logs directory and the api.log file
RUN mkdir -p $WORK_DIR/logs
RUN touch $WORK_DIR/logs/api.log

# Database data
RUN mkdir -p $WORK_DIR/sqlite_data

# Run entrypoint.dev.sh, which is a shell script for starting the development environment
ENTRYPOINT ["sh", "./entrypoints/entrypoint.dev.sh"]
